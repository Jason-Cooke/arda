// Generated by CoffeeScript 1.8.0
(function() {
  var Context, EventEmitter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('./event-emitter');

  module.exports = Context = (function(_super) {
    __extends(Context, _super);

    function Context(_component, props) {
      var subscribers, _ref;
      this._component = _component;
      this.props = props;
      Context.__super__.constructor.apply(this, arguments);
      subscribers = (_ref = this.constructor.subscribers) != null ? _ref : [];
      this.delegate((function(_this) {
        return function(eventName, callback) {
          return _this.on(eventName, callback);
        };
      })(this));
    }

    Context.prototype.getActiveComponent = function() {
      return this._component.refs.root;
    };

    Context.prototype.delegate = function(subscribe) {
      var subscribers, _ref;
      subscribers = (_ref = this.constructor.subscribers) != null ? _ref : [];
      return subscribers.forEach((function(_this) {
        return function(subscriber) {
          return subscriber(_this, subscribe);
        };
      })(this));
    };

    Context.prototype.update = function(stateFn) {
      if (stateFn == null) {
        stateFn = null;
      }
      return Promise.resolve((this.state == null) && this.props ? Promise.resolve(this.initState(this.props)).then((function(_this) {
        return function(state) {
          _this.state = state;
          return Promise.resolve();
        };
      })(this)) : void 0).then((function(_this) {
        return function() {
          var _ref;
          _this.state = (_ref = typeof stateFn === "function" ? stateFn(_this.state) : void 0) != null ? _ref : _this.state;
          return _this.expandTemplate(_this.props, _this.state);
        };
      })(this)).then((function(_this) {
        return function(templateProps) {
          return _this._component.setState({
            activeContext: _this,
            templateProps: templateProps
          });
        };
      })(this));
    };

    Context.prototype.initState = function(props) {
      return props;
    };

    Context.prototype.expandTemplate = function(props, state) {
      return props;
    };

    Context.prototype.render = function(templateProps) {
      var component;
      if (templateProps == null) {
        templateProps = {};
      }
      component = React.createFactory(this.constructor.component);
      return component(templateProps);
    };

    Context.prototype._initByProps = function(props) {
      this.props = props;
      return new Promise((function(_this) {
        return function(done) {
          return Promise.resolve(_this.initState(_this.props)).then(function(state) {
            _this.state = state;
            return done();
          });
        };
      })(this));
    };

    return Context;

  })(EventEmitter);

}).call(this);
