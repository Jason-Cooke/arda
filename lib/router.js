// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, Router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('./event-emitter');

  module.exports = Router = (function(_super) {
    __extends(Router, _super);

    function Router(layoutComponent, el) {
      var Layout;
      this.el = el;
      this._locked = false;
      this._disposers = [];
      this.history = [];
      if (this.el) {
        Layout = React.createFactory(layoutComponent);
        this._rootComponent = React.render(Layout(), this.el);
        this._rootComponent.isRoot = true;
      }
    }

    Router.prototype.isLocked = function() {
      return this._locked;
    };

    Router.prototype.dispose = function() {
      return Promise.all(this._disposers.map((function(_this) {
        return function(disposer) {
          return disposer();
        };
      })(this))).then((function(_this) {
        return function() {
          return new Promsie(function(done) {
            var popUntilBlank;
            return (popUntilBlank = function() {
              if (_this.history.length > 0) {
                return _this.popContext().then(function() {
                  return popUntilBlank();
                });
              } else {
                return done();
              }
            })();
          }).then(function() {
            _this.diposed = true;
            _this._lock = true;
            delete _this.history;
            delete _this._disposers;
            _this.removeAllListeners();
            Object.freeze(_this);
            if (_this.el != null) {
              React.unmountComponentAtNode(_this.el);
            }
            return _this.emit('disposed');
          });
        };
      })(this));
    };

    Router.prototype.pushContextAndWaitForBack = function(contextClass, initialProps) {
      if (initialProps == null) {
        initialProps = {};
      }
      return new Promise((function(_this) {
        return function(done) {
          return _this.pushContext(contextClass, initialProps).then(function(context) {
            return context.on('disposed', done);
          });
        };
      })(this));
    };

    Router.prototype.pushContext = function(contextClass, initialProps) {
      var lastContext;
      if (initialProps == null) {
        initialProps = {};
      }
      this._lock();
      if (lastContext = this.activeContext) {
        lastContext.emit('paused');
      }
      this.activeContext = new contextClass(this._rootComponent, initialProps);
      return this._mountToParent(this.activeContext, initialProps).then((function(_this) {
        return function() {
          _this.history.push({
            name: contextClass.name,
            props: initialProps,
            context: _this.activeContext
          });
          _this._unlock();
          _this.activeContext.emit('created');
          _this.activeContext.emit('started');
          return _this.emit('pushed', _this.activeContext);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.activeContext;
        };
      })(this));
    };

    Router.prototype.popContext = function() {
      var lastContext;
      if (this.history.length <= 0) {
        throw 'history stack is null';
      }
      this._lock();
      this.history.pop();
      return Promise.resolve((lastContext = this.activeContext) ? this._disposeContext(lastContext) : void 0).then((function(_this) {
        return function() {
          var _ref;
          _this.activeContext = (_ref = _this.history[_this.history.length - 1]) != null ? _ref.context : void 0;
          if (_this.activeContext != null) {
            return _this._mountToParent(_this.activeContext, _this.activeContext.props);
          } else {
            return _this._unmountAll();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (_this.activeContext) {
            _this.activeContext.emit('started');
            _this.activeContext.emit('resumed');
            _this.emit('popped', _this.activeContext);
          } else {
            _this.emit('blank');
          }
          return _this._unlock();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.activeContext;
        };
      })(this));
    };

    Router.prototype.replaceContext = function(contextClass, initialProps) {
      var lastContext;
      if (initialProps == null) {
        initialProps = {};
      }
      if (this.history.length <= 0) {
        throw 'history stack is null';
      }
      this._lock();
      lastContext = this.activeContext;
      return Promise.resolve(lastContext ? this._disposeContext(lastContext) : null).then((function(_this) {
        return function() {
          _this.activeContext = new contextClass(_this._rootComponent, initialProps);
          _this.activeContext.emit('created');
          _this.activeContext.emit('started');
          return _this._mountToParent(_this.activeContext, initialProps);
        };
      })(this)).then((function(_this) {
        return function() {
          _this.history.pop();
          _this.history.push({
            name: contextClass.name,
            props: initialProps,
            context: _this.activeContext
          });
          _this._unlock();
          return _this.emit('replaced', _this.activeContext);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.activeContext;
        };
      })(this));
    };

    Router.prototype._mountToParent = function(context, initialProps) {
      return this._initContextWithExpanding(context, initialProps).then((function(_this) {
        return function(templateProps) {
          return _this._outputByEnv(context, templateProps);
        };
      })(this));
    };

    Router.prototype._unmountAll = function() {
      return this._outputByEnv(null);
    };

    Router.prototype._outputByEnv = function(activeContext, props) {
      if (this.el != null) {
        return this._outputToDOM(activeContext, props);
      } else {
        return this._outputToRouterInnerHTML(activeContext, props);
      }
    };

    Router.prototype._outputToDOM = function(activeContext, props) {
      return this._rootComponent.setState({
        activeContext: activeContext,
        templateProps: props
      });
    };

    Router.prototype._outputToRouterInnerHTML = function(activeContext, templateProps) {
      var rendered;
      if (activeContext) {
        rendered = React.createFactory(activeContext.constructor.component)(templateProps);
        return this.innerHTML = React.renderToString(rendered);
      } else {
        return this.innerHTML = '';
      }
    };

    Router.prototype._unlock = function() {
      return this._locked = false;
    };

    Router.prototype._lock = function() {
      return this._locked = true;
    };

    Router.prototype._disposeContext = function(context) {
      delete context.props;
      delete context.state;
      context.emit('disposed');
      if (typeof context.removeAllListeners === "function") {
        context.removeAllListeners();
      }
      context.disposed = true;
      return Object.freeze(context);
    };

    Router.prototype._initContextWithExpanding = function(context, props) {
      return context._initByProps(props).then((function(_this) {
        return function() {
          return context.expandTemplate(context.props, context.state);
        };
      })(this));
    };

    return Router;

  })(EventEmitter);

}).call(this);
